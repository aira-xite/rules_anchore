_header_linux = """# Generated by updater.bzl, do not edit.
"""

_header_windows = """@rem Generated by updater.bzl, do not edit.
@echo off
"""

_update_command = """
../{updater} -db-version={version} -output="{output}" -repo-name="{repo}" -url="{url}"
exit
"""

def _runfiles_path(ctx, f):
    if f == None:
        return None
    path = ctx.workspace_name + "/" + f.short_path
    return path

def _grype_updater_impl(ctx):
    if ctx.attr.is_windows:
        update_executable = ctx.actions.declare_file(ctx.label.name + "-update.bat")
        content = _header_windows + _update_command
    else:
        update_executable = ctx.actions.declare_file(ctx.label.name + "-update.sh")
        content = _header_linux + _update_command

    content = content.format(
        updater = _runfiles_path(ctx, ctx.executable._updater),
        version = ctx.attr.version,
        output = ctx.attr.output,
        repo = ctx.attr.repo_name,
        url = ctx.attr.listing_url,
    )

    ctx.actions.write(
        output = update_executable,
        is_executable = True,
        content = content,
    )

    runfiles = ctx.runfiles(files = [ctx.executable._updater])
    return [
        DefaultInfo(
            executable = update_executable,
            files = depset(direct = [update_executable]),
            runfiles = runfiles,
        )
    ]
    pass

grype_updater_ = rule(
    doc = """Automatically update your Grype CVE database to
    the latest version.""",
    attrs = {
        "listing_url": attr.string(
            doc = """The URL of the listing of available databases. See
            Grype documentation for more details. Defaults to Anchore's
            listing.""",
            default = "https://toolbox-data.anchore.io/grype/databases/listing.json",
            mandatory = False,
        ),
        "version": attr.int(
            doc = """Which version of the database to fetch. Defaults to 3, which
            works with the version of Grype declared in the dependencies for
            these rules.""",
            default = 3,
            mandatory = False,
        ),
        "output": attr.string(
            doc = """The location where the output should be written, relative to
            the repository root. Use a fragment to specify a macro, e.g.,
            "deps.bzl#grype_db" will declare a grype_db macro in deps.bzl.
            Defaults to WORKSPACE. Note that if you use WORKSPACE.bazel, you will
            need to specify that file explicitly in order to get the intended
            default behavior.""",
            default = "WORKSPACE",
            mandatory = False,
        ),
        "repo_name": attr.string(
            doc = "The name of the http_file repository rule to create.",
            default = "grype_database",
            mandatory = False,
        ),
        "_updater": attr.label(
            default = Label("@com_github_hxtk_rules_anchore//tools/grype_updater"),
            mandatory = False,
            executable = True,
            cfg = "host",
        ),
        "is_windows": attr.bool(mandatory = True),
    },
    executable = True,
    implementation = _grype_updater_impl,
)

def grype_updater(
    name,
    output = "WORKSPACE",
    version = 3,
    repository_name = "grype_database",
    listing_url = None,
    **kwargs,
):
    """Automatically update Grype database.

    Run this target with `bazel run` to update your Anchore CVE database
    to be used by these rules using Bazel.

    For example, in `//:BUILD`:
    
    ```starlark
    load("com_github_hxtk_rules_anchore//anchore:defs.bzl", "grype_updater")

    grype_updater(
        name = "update_grype",
        output = "deps.bzl%grype_db",
    )
    ```

    Args:
        name: the name of the label to be created. This is the target you will
            invoke with `bazel run`.
        output: the WORKSPACE or macro file in which the repository rule shall
            be defined. If a macro file is specified, use "%" followed by some
            name to indicate the name of the macro to be created, e.g., from
            the example above `deps.bzl%grype_database` will result in deps.bzl
            containing a `grype_db` macro which, when called, will define
            the repository rule for a Grype CVE database. This is consistent with
            the definitions used in `bazel-gazelle`. Previously, the canonical
            separator was "#". It is preserved for compatibility. If no
            separator is used, the repository will be defined at the top level
            of whatever file is specified.
        version: the database format major version. This should generally be left
            as the default, as it must be chosen to be compatible with the version
            of Grype in this package.
        repository_name: the name of the repository to be created. You will reference
            the database as `@[repository_name]//file` in the `database` field of a
            `grype_test` rule. For example, with the default value, you would use
            `@grype_database//file`.
        listing_url: the URL from which the list of available databases shall be
            fetched. Defaults to the Anchore listing normally used by Grype.
    """
    if listing_url != None:
        kwargs["listing_url"] = listing_url

    grype_updater_(
        name = name,
        output = output,
        version = version,
        repo_name = repository_name,
        listing_url = listing_url,
        is_windows = select({
            "@bazel_tools//src/conditions:host_windows": True,
            "//conditions:default": False,
        }),
        **kwargs,
    )
